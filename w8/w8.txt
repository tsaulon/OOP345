Script started on Tue 17 Apr 2018 06:52:21 AM EDT
thsaulon@matrix:~/Courses/OOP345/w8> whoami
thsaulon
thsaulon@matrix:~/Courses/OOP345/w8> cat List.h Element.h w8.cpp
// Workshop 9 - Smart Pointers
// List.h

#include <iostream>
#include <iomanip>
#include <vector>
#include <string>
#include <fstream>
#include <memory>

namespace w9 {
	/*!Templated class called List that used typename T.*/
	template <typename T>
	class List {
		std::vector<T> list;
	public:
		List() { }
		List(const char* fn) {
			std::ifstream file(fn);
			if (!file)
				throw std::string("*** Failed to open file ") +
				std::string(fn) + std::string(" ***");
			while (file) {
				T e;
				if (e.load(file))
					list.push_back(*new T(e));
			}
		}
		size_t size() const { return list.size(); }
		const T& operator[](size_t i) const { return list[i]; }
		/*!Overloaded operator modified as per the workshop instructions; pushes a unique_ptr to the list.*/
		void operator+=(std::unique_ptr<T> p) {
			list.push_back(*p);
		}
		void display(std::ostream& os) const {
			os << std::fixed << std::setprecision(2);
			for (auto& e : list)
				e.display(os);
		}
	};

	template<typename T>
	std::ostream& operator<<(std::ostream& os, const List<T>& l) {
		l.display(os);
		return os;
	}
}// Workshop 9 - Smart Pointers
// Element.h

#include <iostream>
#include <iomanip>
#include <string>
#include <fstream>

extern const int FWC;
extern const int FWD;
extern const int FWP;

namespace w9 {

	struct Description {
		unsigned code;
		std::string desc;
		bool load(std::ifstream& f) {
			f >> code >> desc;
			return f.good();
		}
		void display(std::ostream& os) const {
			os << std::setw(FWC) << code << std::setw(FWD)
				<< desc << std::endl;
		}
	};

	struct Price {
		unsigned code;
		double price;
		bool load(std::ifstream& f) {
			f >> code >> price;
			return f.good();
		}
		void display(std::ostream& os) const {
			os << std::setw(FWC) << code << std::setw(FWP)
				<< price << std::endl;
		}
	};

	struct Product {
		std::string desc;
		double price;
		Product() {}
		Product(const std::string& str, double p) : desc(str), price(p) {}
		void display(std::ostream& os) const {
			os << std::setw(FWD) << desc << std::setw(FWP)
				<< price << std::endl;
		}
		/*!Structure member function that validates whether or not the price of the current structure is a negative value and throws an exception.*/
		void validate() {
			if (price < 0) { throw std::string("*** Negative prices are invalid ***"); }
		}
	};
}// Workshop 9 - Smart Pointers
 // w9.cpp

#include <iostream>
#include <iomanip>
#include <memory>
#include "Element.h"
#include "List.h"

const int FWC =  5;
const int FWD = 12;
const int FWP =  8;

/*!Function inside implementation that merge two templated classes based on the code of the typename passed into the templates.*/
w9::List<w9::Product> merge(const w9::List<w9::Description>& desc, const w9::List<w9::Price>& price) {

    w9::List<w9::Product> priceList;



    // complete this part

	//iterate through each index
	for (size_t i = 0; i < price.size(); i++)
	{
		//iterate through each index again for a comparison
		for (size_t j = 0; j < desc.size(); j++)
		{
			if (price[i].code == desc[j].code)
			{
				std::unique_ptr<w9::Product> item(new w9::Product(desc[j].desc, price[i].price));
				item->validate();
				priceList += std::move(item);

			}
			 
		}
	}


    return priceList;
}

int main(int argc, char** argv) {
	std::cout << "\nCommand Line : ";
	for (int i = 0; i < argc; i++) {
		std::cout << argv[i] << ' ';
	}
	std::cout << std::endl;
	if (argc != 3) {
		std::cerr << "\n***Incorrect number of arguments***\n";
		return 1;
	}

	try {
		w9::List<w9::Description> desc(argv[1]);
		std::cout << std::endl;
		std::cout << std::setw(FWC) << "Code" <<
			std::setw(FWD) << "Description" << std::endl;
		std::cout << desc << std::endl;
		w9::List<w9::Price> price(argv[2]);
		std::cout << std::endl;
		std::cout << std::setw(FWC) << "Code" <<
			std::setw(FWP) << "Price" << std::endl;
		std::cout << price << std::endl;
		w9::List<w9::Product> priceList = merge(desc, price);
		std::cout << std::endl;
		std::cout << std::setw(FWD) << "Description" <<
			std::setw(FWP) << "Price" << std::endl;
		std::cout << priceList << std::endl;
	}
	catch (const std::string& msg) {
		std::cerr << msg << std::endl;
	}
	catch (const char* msg) {
		std::cerr << msg << std::endl;
	}

	std::cout << "\nPress any key to continue ... ";
	std::cin.get();
}thsaulon@matrix:~/Courses/OOP345/w8> cat List.h Element.h w8.cppwhoami[K[2Pexitw8 Descriptions.dat BadPrices.dat [3P[C[C[C[C[C[C[C[C[C[C[C[4Pg++ -o w7 -std=c++0x w8.cppw8 Descriptions.dat Prices.dat [4Pg++ -o w7 -std=c++0x w8.cpp[C[1P[1@8
thsaulon@matrix:~/Courses/OOP345/w8> w8 Descriptions.dat Prices.dat 

Command Line : w8 Descriptions.dat Prices.dat 

 Code Description
 4662    tomatoes
 4039   cucumbers
 4056    brocolli
 4067      lemons
 4068     oranges


 Code   Price
 4067    0.99
 4068    0.67
 4039    1.99
 4056    2.49


 Description   Price
      lemons    0.99
     oranges    0.67
   cucumbers    1.99
    brocolli    2.49


Press any key to continue ... 
thsaulon@matrix:~/Courses/OOP345/w8> w8 Descriptions.dat BadPrices.dat 

Command Line : w8 Descriptions.dat BadPrices.dat 

 Code Description
 4662    tomatoes
 4039   cucumbers
 4056    brocolli
 4067      lemons
 4068     oranges


 Code   Price
 4067    0.99
 4068    0.67
 4039    1.99
 4056   -2.49

*** Negative prices are invalid ***

Press any key to continue ... 
thsaulon@matrix:~/Courses/OOP345/w8> exit
exit

Script done on Tue 17 Apr 2018 06:53:11 AM EDT
